## Bing
Here is a shorter version of the C program for implementing a queue of integers that can check if the queue is empty, delete elements from the queue, and insert elements into the queue:

#include <stdio.h>
#include <stdlib.h>

#define n 10 // capacity of the queue
int queue[n], REAR = 0, FRONT = 0;

void enqueue(int x) {
    if ((REAR + 1) % n == FRONT) {
        printf("Queue is full.\n");
    } else {
        queue[REAR++] = x;
        REAR %= n;
    }
}

void dequeue() {
    if (REAR == FRONT) {
        printf("Queue is empty.\n");
    } else {
        printf("Deleted element: %d\n", queue[FRONT++]);
        FRONT %= n;
    }
}

int main() {
    int choice, x;
    while (1) {
        printf("Enter 1 to insert element into queue.\n");
        printf("Enter 2 to delete element from queue.\n");
        printf("Enter 3 to exit.\n");
        printf("Enter your choice: ");
        scanf("%d", &choice);
        switch (choice) {
            case 1:
                printf("Enter element to be inserted: ");
                scanf("%d", &x);
                enqueue(x);
                break;
            case 2:
                dequeue();
                break;
            case 3:
                exit(0);
            default:
                printf("Invalid choice. Try again.\n");
        }
    }
    return 0;
}

This program uses an array to implement the queue data structure. The enqueue function inserts an element into the queue, while the dequeue function removes an element from the queue. The main function provides a menu to the user to choose between inserting an element, deleting an element, or exiting the program. If the user tries to insert an element into a full queue, or delete an element from an empty queue, the program will display an appropriate message.
